version: "3.8"

services:
  # task-service: # Add this section for the task service
  #   container_name: task-service
  #   build:
  #     context: . # Path to the Dockerfile and main.go
  #     dockerfile: task-service.Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "8080:8080" # Map the port your task service will run on

  redis:
    image: redis
    container_name: redis
    platform: linux/amd64
    ports:
      - "6379:6379"
    networks:
      - default

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    platform: linux/amd64
    ports:
      - "5772:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - default

  postgres:
    image: postgres
    container_name: postgres
    platform: linux/amd64
    ports:
      - "5442:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    networks:
      - default

  mysql:
    image: mysql:5.7
    container_name: mysql
    platform: linux/amd64
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    networks:
      - default

  # datadog:
  #   image: "datadog/agent:latest" # Menggunakan image resmi Datadog Agent
  #   container_name: datadog
  #   platform: linux/amd64
  #   environment:
  #     - DD_API_KEY=${DATADOG_APIKEY} # Ganti dengan API Key Datadog Anda
  #     - DD_SITE=${DATADOG_SITE}
  #     - DD_ENV=development # Environment (dev, staging, production)
  #     - DD_SERVICE=your-service-name # Nama service
  #     - DD_VERSION=1.0 # Versi aplikasi
  #     - DD_LOGS_ENABLED=true # Mengaktifkan log collection
  #     - DD_APM_ENABLED=true # Mengaktifkan APM (Application Performance Monitoring)
  #     - DD_PROCESS_AGENT_ENABLED=true # Mengaktifkan Process Agent untuk memonitor proses
  #     - DD_CONTAINER_EXCLUDE="name:datadog-agent" # Agar agent tidak memonitor dirinya sendiri
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock # Memberi akses ke Docker socket
  #     - /proc/:/host/proc/:ro # Memberi akses ke file system proc untuk mengumpulkan metrik sistem
  #     - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro # Akses ke cgroup untuk melacak penggunaan resource container
  #   ports:
  #     - "8826:8126/tcp" # APM tracing port
  #     - "8825:8125/udp" # DogStatsD port
  #   networks:
  #     - default
networks:
  default:
    driver: bridge
