version: "3.8"

services:

  redis:
    image: redis
    container_name: redis
    platform: linux/amd64
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - default

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    platform: linux/amd64
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - default

  postgres:
    image: postgres
    container_name: postgres
    platform: linux/amd64
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "user"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    networks:
      - default

  mysql:
    image: mysql:5.7
    container_name: mysql
    platform: linux/amd64
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    # healthcheck:
    #   test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$password"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    networks:
      - default
  
  mongodb:
    image: mongo:4.4
    container_name: mongodb
    platform: linux/amd64
    ports:
      - "27017:27017"   
    volumes:
      - mongo_data:/data/db  # Volume for persistent data
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin    
      MONGO_INITDB_ROOT_PASSWORD: password 
      MONGO_INITDB_DATABASE: task_management_logs
    # healthcheck:
    #   test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    networks:
      - default 

  # Optional: Mongo Express (Web Admin MongoDB)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    platform: linux/amd64
    ports:
      - "8071:8071"
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      - default
  
  # datadog:
  #   image: datadog/agent:latest
  #   container_name: datadog-agent
  #   environment:
  #     - DD_API_KEY="816dfd57aaffc64018ab5034e6e51192"
  #     - DD_SITE="us5.datadoghq.com"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   ports:
  #     - "8126:8126"  
  #   networks:
  #     - default

  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
      # - "50052:50052"
    environment:
      - ENV_FILE=.env
    depends_on:
      - redis
      - postgres
      - mysql
      - log-service
    networks:
      - default
  
  task-service:
    container_name: task-service
    build:
      context: ./task-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - ENV_FILE=.env
    depends_on:
      - redis
      - rabbitmq
      - postgres
      - mysql
      - user-service
      - log-service
    networks:
      - default
  
  log-service:
    container_name: log-service
    build:
      context: ./log-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ENV_FILE=.env
    depends_on:
      - redis
      - rabbitmq
      - postgres
      - mysql
      - mongodb
    networks:
      - default

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - ENV_FILE=.env
    depends_on:
      - redis
      - rabbitmq
      - postgres
      - mysql
      - mongodb
      - task-service
    networks:
      - default

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - user-service
      - task-service
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  mongo_data:
  postgres_data:
